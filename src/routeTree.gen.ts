/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as EmailsRouteImport } from './routes/emails'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as BookingsRouteImport } from './routes/bookings'
import { Route as IndexRouteImport } from './routes/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const EmailsRoute = EmailsRouteImport.update({
  id: '/emails',
  path: '/emails',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingsRoute = BookingsRouteImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bookings': typeof BookingsRoute
  '/dashboard': typeof DashboardRoute
  '/emails': typeof EmailsRoute
  '/login': typeof LoginRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bookings': typeof BookingsRoute
  '/dashboard': typeof DashboardRoute
  '/emails': typeof EmailsRoute
  '/login': typeof LoginRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/bookings': typeof BookingsRoute
  '/dashboard': typeof DashboardRoute
  '/emails': typeof EmailsRoute
  '/login': typeof LoginRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/bookings' | '/dashboard' | '/emails' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/bookings' | '/dashboard' | '/emails' | '/login'
  id: '__root__' | '/' | '/bookings' | '/dashboard' | '/emails' | '/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookingsRoute: typeof BookingsRoute
  DashboardRoute: typeof DashboardRoute
  EmailsRoute: typeof EmailsRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emails': {
      id: '/emails'
      path: '/emails'
      fullPath: '/emails'
      preLoaderRoute: typeof EmailsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookings': {
      id: '/bookings'
      path: '/bookings'
      fullPath: '/bookings'
      preLoaderRoute: typeof BookingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookingsRoute: BookingsRoute,
  DashboardRoute: DashboardRoute,
  EmailsRoute: EmailsRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
